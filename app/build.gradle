apply plugin: "com.android.model.application"

model {
    android {
        compileSdkVersion 24
        buildToolsVersion "24.0.1"

        ndk {
            moduleName "PrizmaTagramN"
            cppFlags.add("-I${file(getOpenCVDir())}".toString())
//            cppFlags.add("-I${file("src/main/jniLibs/")}".toString())
//            ldFlags.add("-L${file("src/main/jniLibs/")}".toString())
            cppFlags.add("-I${file(getOpenCVDir())}".toString())
            ldLibs.addAll(["android", "EGL", "GLESv2", "dl", "GLESv1_CM", "log", "z"])//, "OpenCL", "opencv_java3"])
            cppFlags.addAll(["-fexceptions", "-exceptions", "-llog", "-ldl", "-frtti", "-pthread", "-fopenmp", "-std=c++11"])
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'])

            stl = "gnustl_shared" // Which STL library to use: gnustl or stlport
//            stl = "gnustl_static"
        }

        defaultConfig {
            applicationId "com.togrulseyid.prizmatagram"
            minSdkVersion.apiLevel 8
            targetSdkVersion.apiLevel 24
            versionCode 1
            versionName "1.0"

            buildConfigFields {
                create() {
                    type "int"
                    name "VALUE"
                    value "1"
                }
            }
        }
        buildTypes {
            release {
                minifyEnabled false
//                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                proguardFiles.add(file("proguard-rules.pro"))
            }
        }
        productFlavors {
            create("flavor1") {
                applicationId "com.app"
            }
        }

//        // Configures source set directory.
//        sources {
//            main {
//                java {
//                    source {
//                        srcDir "src"
//                    }
//                }
//                jni {
//                    source {
//                        srcDir "src"
//                    }
//                }
//            }
//        }
    }
    android.productFlavors {
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa
        create("arm") {
            ndk.abiFilters.add("armeabi")
            ndk.ldFlags.add("-L${file('src/main/jniLibs/armeabi')}".toString())
        }
        create("arm7") {
            ndk.abiFilters.add("armeabi-v7a")
            ndk.ldFlags.add("-L${file('src/main/jniLibs/armeabi-v7a')}".toString())
        }
        create("arm8") {
            ndk.abiFilters.add("arm64-v8a")
            ndk.ldFlags.add("-L${file('src/main/jniLibs/arm64-v8a')}".toString())
        }
    }
}


def getOpenCVDir() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def externalModuleDir = properties.getProperty('opencv.dir', null)
    if (externalModuleDir == null) {
        throw new GradleException(
                "OpenCV location not found. Define location with opencv.dir in the local.properties file!")
    }
    return externalModuleDir
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile project(':openCVLibrary310')
}
